# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := test_main
DEFS_Debug := \
	'-DHTTP_PARSER_STRICT=0' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-D_POSIX_C_SOURCE=200112' \
	'-DDEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
	-Wall \
	-Wno-pedantic \
	-Wno-long-long \
	-fvisibility=hidden \
	-fomit-frame-pointer \
	-fdata-sections \
	-ffunction-sections \
	-DGOOGLE_PROTOBUF_NO_THREAD_SAFETY \
	-g \
	-O0

# Flags passed to only C files.
CFLAGS_C_Debug :=

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-std=c++1y \
	-fvisibility-inlines-hidden \
	-fexceptions \
	-frtti

INCS_Debug := \
	-I$(srcdir)/third_party/pt-1.4 \
	-I$(srcdir)/third_party/http-parser \
	-I$(srcdir)/third_party/libuv/include

DEFS_Release := \
	'-DHTTP_PARSER_STRICT=0' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-D_POSIX_C_SOURCE=200112' \
	'-DNDEBUG'

# Flags passed to all source files.
CFLAGS_Release := \
	-Wall \
	-Wno-pedantic \
	-Wno-long-long \
	-fvisibility=hidden \
	-fomit-frame-pointer \
	-fdata-sections \
	-ffunction-sections \
	-DGOOGLE_PROTOBUF_NO_THREAD_SAFETY \
	-Os

# Flags passed to only C files.
CFLAGS_C_Release :=

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-std=c++1y \
	-fvisibility-inlines-hidden \
	-fexceptions \
	-frtti

INCS_Release := \
	-I$(srcdir)/third_party/pt-1.4 \
	-I$(srcdir)/third_party/http-parser \
	-I$(srcdir)/third_party/libuv/include

OBJS := \
	$(obj).target/$(TARGET)/http_encode.o \
	$(obj).target/$(TARGET)/test_main.o \
	$(obj).target/$(TARGET)/http_conn.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# Make sure our dependencies are built before any of us.
$(OBJS): | $(obj).target/third_party/libhttp_parser.a $(obj).target/third_party/libuv.a

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-pthread

LDFLAGS_Release := \
	-pthread \
	-Os \
	-Wl,--exclude-libs,ALL \
	-Wl,--gc-sections

LIBS := \
	-lm \
	-ldl \
	-lrt

$(builddir)/test_main: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(builddir)/test_main: LIBS := $(LIBS)
$(builddir)/test_main: LD_INPUTS := $(OBJS) $(obj).target/third_party/libhttp_parser.a $(obj).target/third_party/libuv.a
$(builddir)/test_main: TOOLSET := $(TOOLSET)
$(builddir)/test_main: $(OBJS) $(obj).target/third_party/libhttp_parser.a $(obj).target/third_party/libuv.a FORCE_DO_CMD
	$(call do_cmd,link)

all_deps += $(builddir)/test_main
# Add target alias
.PHONY: test_main
test_main: $(builddir)/test_main

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/test_main

